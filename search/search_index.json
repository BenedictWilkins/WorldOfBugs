{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Test Test2","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#test","text":"","title":"Test"},{"location":"#test2","text":"","title":"Test2"},{"location":"Developing%20Worlds/Agents/","text":"Agents Structure of an Agent The default structure of an agent is derived from Unity's MLAgents package abstractions, including ISensor, IActuator, and Agent. Actions and Observations The WOB Python API is the same whether using a standalone build or the unity editor. WOB follows OpenAI Gym for a single agent with some extras to help set up environments in Unity. The step method of the environment is where actions are taken and observations are collected, its usage looks as follows. {{< card-code lang=\"Python\">}} observation, reward, done, info = env.step(action) {{< /card-code >}} The observation contains visual data","title":"Agents"},{"location":"Developing%20Worlds/Agents/#agents","text":"","title":"Agents"},{"location":"Developing%20Worlds/Agents/#structure-of-an-agent","text":"The default structure of an agent is derived from Unity's MLAgents package abstractions, including ISensor, IActuator, and Agent.","title":"Structure of an Agent"},{"location":"Developing%20Worlds/Agents/#actions-and-observations","text":"The WOB Python API is the same whether using a standalone build or the unity editor. WOB follows OpenAI Gym for a single agent with some extras to help set up environments in Unity. The step method of the environment is where actions are taken and observations are collected, its usage looks as follows. {{< card-code lang=\"Python\">}} observation, reward, done, info = env.step(action) {{< /card-code >}} The observation contains visual data","title":"Actions and Observations"},{"location":"Developing%20Worlds/Bugs/Perceptual/","text":"","title":"Perceptual"},{"location":"Examples/","text":"","title":"Index"},{"location":"Examples/World-v1/Overview/","text":"World-v1 is an example environment build with WOB, it was used to perform initial experiments in this paper , it is also the example used in Getting Started","title":"Overview"},{"location":"Getting%20started/","text":"Clone the github repository: git clone https://github.com/BenedictWilkins/world-of-bugs.git While in the same directory, install with: python -m pip install world-of-bugs From here there are two options: use a standalone build, or use the unity editor. If you want to use the unity editor, skip to the next section . Getting Started With Standalone Builds Download the latest build for your system here . Extract the build files to a directory of your choice, for example ~/Downloads/builds/Standalone-Linux-World-v1 . To run with the default build settings: {{< card-code header=\"MyScript.py\" lang=\"Python\">}}import worldofbugs add downloaded builds to path worldofbugs.utils.BuildResolver.path += \"~/Downloads/builds/\" print(worldofbugs.utils.BuildResolver.get_builds()) # sanity check, list all avaliable environments make the environment env = worldofbugs.utils.make('World-v1') env.reset() for i in range(1000): # advance simulation 1000 steps env.step(env.action_space.sample()) # take a random action env.render() #render the game screen, requires pygame installation {{< /card-code >}} If everything worked correctly you should see a printout like: [~/Downloads/builds/Standalone-Linux-World-v1/World-v1.x86_64] and if you have pygame installed ( pip install pygame ) something like the following should appear in your pygame window. You may also notice that a small Unity window popped up, unfortunately this is required to ensure the agent's observations are correctly processed by GPU, see here for details. Getting Started with Unity Rather than using a standalone build, it is also possible to connect directly to the Unity editor. This requires the WOB project to be open in unity. To avoid issues, install Unity version 2020.3.25f1 which can be found in the unity download archive using the latest version of UnityHub . Once installed, locate the UnityProject folder in your WOB root directory, add it as a new project in UnityHub and open it in the editor. To connect to the editor, run the following script and then press the play button in the editor window. {{< card-code header=\"WithUnityEditor.py\" lang=\"Python\">}}import worldofbugs make the environment, None indicates we want to connect to the editor env = worldofbugs.utils.make(None) env.reset() for i in range(1000): # advance simulation 1000 steps env.step(env.action_space.sample()) # take a random action, this will happen in the editor {{< /card-code >}} You should see the agent (white sphere) start to move around the level in the scene view, or a message like the one below in the game view. By default, the game view is not rendered as no cameras are in use -- all of the observation data is going to the agent via RenderTextures. To look through the eyes of the agent, go to Window -> Preview -> RenderTextureCameraPreview . The game view can be safely closed in favour of this new view.","title":"Quick Start Guide"},{"location":"Getting%20started/#getting-started-with-standalone-builds","text":"Download the latest build for your system here . Extract the build files to a directory of your choice, for example ~/Downloads/builds/Standalone-Linux-World-v1 . To run with the default build settings: {{< card-code header=\"MyScript.py\" lang=\"Python\">}}import worldofbugs","title":"Getting Started With Standalone Builds"},{"location":"Getting%20started/#add-downloaded-builds-to-path","text":"worldofbugs.utils.BuildResolver.path += \"~/Downloads/builds/\" print(worldofbugs.utils.BuildResolver.get_builds()) # sanity check, list all avaliable environments","title":"add downloaded builds to path"},{"location":"Getting%20started/#make-the-environment","text":"env = worldofbugs.utils.make('World-v1') env.reset() for i in range(1000): # advance simulation 1000 steps env.step(env.action_space.sample()) # take a random action env.render() #render the game screen, requires pygame installation {{< /card-code >}} If everything worked correctly you should see a printout like: [~/Downloads/builds/Standalone-Linux-World-v1/World-v1.x86_64] and if you have pygame installed ( pip install pygame ) something like the following should appear in your pygame window. You may also notice that a small Unity window popped up, unfortunately this is required to ensure the agent's observations are correctly processed by GPU, see here for details.","title":"make the environment"},{"location":"Getting%20started/#getting-started-with-unity","text":"Rather than using a standalone build, it is also possible to connect directly to the Unity editor. This requires the WOB project to be open in unity. To avoid issues, install Unity version 2020.3.25f1 which can be found in the unity download archive using the latest version of UnityHub . Once installed, locate the UnityProject folder in your WOB root directory, add it as a new project in UnityHub and open it in the editor. To connect to the editor, run the following script and then press the play button in the editor window. {{< card-code header=\"WithUnityEditor.py\" lang=\"Python\">}}import worldofbugs","title":"Getting Started with Unity"},{"location":"Getting%20started/#make-the-environment-none-indicates-we-want-to-connect-to-the-editor","text":"env = worldofbugs.utils.make(None) env.reset() for i in range(1000): # advance simulation 1000 steps env.step(env.action_space.sample()) # take a random action, this will happen in the editor {{< /card-code >}} You should see the agent (white sphere) start to move around the level in the scene view, or a message like the one below in the game view. By default, the game view is not rendered as no cameras are in use -- all of the observation data is going to the agent via RenderTextures. To look through the eyes of the agent, go to Window -> Preview -> RenderTextureCameraPreview . The game view can be safely closed in favour of this new view.","title":"make the environment, None indicates we want to connect to the editor"},{"location":"Getting%20started/Live%20Configuration/_index/","text":"An environment can be configured using the WOB environment API . Configuring Bugs A bug can be enabled using the enable_bug method, for example: env.enable_bug(\"MissingTexture\") A bug can be disabled using the disable_bug method, for example: env.disable_bug(\"TextureCorruption\") Bugs names a derived from their type name as it appears in Unity, a full list of bugs can be found Configuring Agent Behaviour An agents behvaiour can be changed using the set_agent_behaviour , for example: env.set_agent_behaviour(\"Manual\") . Setting the agents behaviour will enable heuristic mode. In this mode, actions will be selected by the given Unity script rather than by Python, i.e. the action in env.step(action) will be ignored. Advanced Logging By default all messages logged with Unity's default logging system, Debug.Log are also displayed in the Python console.","title":" index"},{"location":"Getting%20started/Live%20Configuration/_index/#configuring-bugs","text":"A bug can be enabled using the enable_bug method, for example: env.enable_bug(\"MissingTexture\") A bug can be disabled using the disable_bug method, for example: env.disable_bug(\"TextureCorruption\") Bugs names a derived from their type name as it appears in Unity, a full list of bugs can be found","title":"Configuring Bugs"},{"location":"Getting%20started/Live%20Configuration/_index/#configuring-agent-behaviour","text":"An agents behvaiour can be changed using the set_agent_behaviour , for example: env.set_agent_behaviour(\"Manual\") . Setting the agents behaviour will enable heuristic mode. In this mode, actions will be selected by the given Unity script rather than by Python, i.e. the action in env.step(action) will be ignored.","title":"Configuring Agent Behaviour"},{"location":"Getting%20started/Live%20Configuration/_index/#advanced","text":"","title":"Advanced"},{"location":"Getting%20started/Live%20Configuration/_index/#logging","text":"By default all messages logged with Unity's default logging system, Debug.Log are also displayed in the Python console.","title":"Logging"},{"location":"Overview/_index/","text":"World of Bugs (WOB) is a platform that supports research in Automated Bug Detection (ABD) in video games. What is Automated Bug Detection?","title":"Overview"},{"location":"Overview/_index/#what-is-automated-bug-detection","text":"","title":"What is Automated Bug Detection?"},{"location":"Reference/_index/","text":"Summary Members Descriptions class Test TESTING TESTING! class TEST2 TESTING2 [Test](#classTest) class Test TESTING TESTING! Summary Members Descriptions public int testing TEST MEMBER Members public int testing TEST MEMBER class TEST2 TESTING2 [Test](#classTest) Summary Members Descriptions Members Generated by Moxygen","title":"Summary"},{"location":"Reference/_index/#summary","text":"Members Descriptions class Test TESTING TESTING! class TEST2 TESTING2 [Test](#classTest)","title":"Summary"},{"location":"Reference/_index/#class-test","text":"TESTING TESTING!","title":"class Test"},{"location":"Reference/_index/#summary_1","text":"Members Descriptions public int testing TEST MEMBER","title":"Summary"},{"location":"Reference/_index/#members","text":"","title":"Members"},{"location":"Reference/_index/#public-inttesting","text":"TEST MEMBER","title":"public inttesting"},{"location":"Reference/_index/#class-test2","text":"TESTING2 [Test](#classTest)","title":"class TEST2"},{"location":"Reference/_index/#summary_2","text":"Members Descriptions","title":"Summary"},{"location":"Reference/_index/#members_1","text":"Generated by Moxygen","title":"Members"}]}